# utils/verificador_utils.py
# Utilidades para el agente verificador

import sys
import os

# Importar desde la estructura de paquetes
try:
    # Intento 1: Importaci√≥n relativa desde el paquete
    from ..data.clientes_bd import consultar_cliente
except ImportError:
    try:
        # Intento 2: Importaci√≥n absoluta
        from data.clientes_bd import consultar_cliente
    except ImportError:
        # Intento 3: Agregar ruta manualmente
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        from data.clientes_bd import consultar_cliente

def construir_input_verificador(nit, contexto_conversacion=None):
    """
    Construye el input para el agente verificador consultando la base de datos
    VERSI√ìN CORREGIDA - Incluye informaci√≥n extra√≠da del mensaje
    """
    
    # Consultar base de datos de clientes
    datos_cliente = consultar_cliente(nit)
    
    if datos_cliente.get("es_cliente", False):
        # CLIENTE EXISTENTE
        input_text = construir_input_cliente_existente(datos_cliente, nit, contexto_conversacion)
    else:
        # CLIENTE NUEVO
        input_text = construir_input_cliente_nuevo(datos_cliente, nit, contexto_conversacion)
    
    return input_text


def construir_input_cliente_existente(datos_cliente, nit, contexto_conversacion):
    """
    Construye input para cliente existente - VERSI√ìN CORREGIDA
    """
    
    # Calcular a√±os de relaci√≥n
    tiempo_relacion = datos_cliente.get("tiempo_relacion_anos", 0)
    
    # Formatear productos actuales
    productos = datos_cliente.get("productos_actuales", [])
    productos_texto = ", ".join(productos) if productos else "Productos b√°sicos"
    
    # Formatear beneficios disponibles
    beneficios = datos_cliente.get("beneficios_disponibles", [])
    beneficios_texto = "\n- " + "\n- ".join(beneficios) if beneficios else "Beneficios est√°ndar"
    
    # Informaci√≥n del gestor
    gestor = datos_cliente.get("gestor_asignado", "Ejecutivo asignado")
    telefono_gestor = datos_cliente.get("telefono_gestor", "")
    
    # TRADUCIR PERFIL T√âCNICO A LENGUAJE AMIGABLE
    score_interno = datos_cliente.get("score_interno_historico", 0)
    clasificacion_riesgo = datos_cliente.get("clasificacion_riesgo", "")
    perfil_amigable = traducir_perfil_tecnico(score_interno, clasificacion_riesgo)
    
    # *** NUEVA SECCI√ìN: INFORMACI√ìN DEL CR√âDITO SOLICITADO ***
    info_credito_section = ""
    if contexto_conversacion:
        tipo_credito = contexto_conversacion.get('tipo_credito')
        monto_solicitado = contexto_conversacion.get('monto_solicitado') 
        proposito = contexto_conversacion.get('proposito')
        
        if tipo_credito or monto_solicitado:
            info_credito_section = f"""
INFORMACI√ìN DEL CR√âDITO YA SOLICITADO (NO PREGUNTAR DE NUEVO):
- Tipo solicitado: {tipo_credito or 'No especificado'}
- Monto solicitado: ${monto_solicitado:,} COP ({contexto_conversacion.get('monto_formato', 'N/A')}) si monto_solicitado else 'No especificado'
- Prop√≥sito: {proposito or 'No especificado'}

INSTRUCCI√ìN CR√çTICA: El cliente YA proporcion√≥ esta informaci√≥n. NO preguntes el tipo ni el monto.
RESPONDE: "Perfecto Carlos, necesitas un {tipo_credito} por ${monto_solicitado//1000000 if monto_solicitado else 'X'}M para {proposito}. Para evaluar necesito estados financieros 2024."
"""
    
    input_text = f"""
VERIFICACI√ìN DE CLIENTE - RESULTADO: CLIENTE EXISTENTE ‚úÖ

DATOS DEL CLIENTE:
- Empresa: {datos_cliente.get("nombre", "Empresa")}
- NIT consultado: {nit}
- Cliente desde: {datos_cliente.get("fecha_vinculacion", "No disponible")} ({tiempo_relacion} a√±os)
- Sector: {datos_cliente.get("sector", "No especificado").title()}
- Ciudad: {datos_cliente.get("ciudad", "No especificada")}

PERFIL COMERCIAL:
- Descripci√≥n del perfil: {perfil_amigable}
- Relaci√≥n comercial: {datos_cliente.get("relacion_comercial", "No evaluada")}

PRODUCTOS ACTUALES:
{productos_texto}

BENEFICIOS DISPONIBLES PARA ESTE CLIENTE:
{beneficios_texto}

GESTOR ASIGNADO:
- {gestor}
- Tel√©fono: {telefono_gestor}

{info_credito_section}

CONTEXTO CONVERSACIONAL PREVIO:
{formatear_contexto_conversacion(contexto_conversacion)}

INSTRUCCIONES IMPORTANTES:
- NO menciones scores num√©ricos ({score_interno}) ni c√≥digos t√©cnicos ({clasificacion_riesgo})
- USA el perfil amigable: "{perfil_amigable}"
- Este cliente tiene {tiempo_relacion} a√±os de relaci√≥n
- SI YA TIENES informaci√≥n del cr√©dito arriba, √∫sala directamente y pide documentos
- SI NO tienes informaci√≥n completa del cr√©dito, pregunta conversacionalmente
- Sal√∫dalo reconociendo su historia y menciona productos actuales
"""
    
    return input_text

def traducir_perfil_tecnico(score_interno, clasificacion_riesgo):
    """
    Traduce t√©rminos t√©cnicos a lenguaje amigable para el cliente
    """
    if score_interno >= 750 or clasificacion_riesgo in ["A1", "A2"]:
        return "cliente preferencial con excelente historial comercial"
    elif score_interno >= 650 or clasificacion_riesgo in ["B1", "B+"]:
        return "cliente establecido con buen comportamiento comercial"
    elif score_interno >= 600 or clasificacion_riesgo in ["B2", "BBB+"]:
        return "cliente con relaci√≥n comercial s√≥lida"
    elif score_interno >= 500 or clasificacion_riesgo in ["BBB", "C1"]:
        return "cliente en desarrollo con potencial de crecimiento"
    elif score_interno >= 400 or clasificacion_riesgo in ["C2", "BB"]:
        return "cliente que requiere evaluaci√≥n personalizada"
    else:
        return "cliente que requiere an√°lisis detallado"

def construir_input_cliente_nuevo(datos_cliente, nit, contexto_conversacion):
    """
    Construye input para cliente nuevo o no encontrado
    """
    
    motivo = datos_cliente.get("motivo", "NIT no encontrado")
    sector_identificado = datos_cliente.get("sector_identificado", "")
    ciudad_identificada = datos_cliente.get("ciudad_identificada", "")
    
    input_text = f"""
VERIFICACI√ìN DE CLIENTE - RESULTADO: CLIENTE NUEVO üÜï

DATOS DE LA CONSULTA:
- NIT consultado: {nit}
- Resultado: {datos_cliente.get("nombre", "Empresa no identificada")}
- Motivo: {motivo}

INFORMACI√ìN IDENTIFICADA:
- Sector estimado: {sector_identificado.title() if sector_identificado else "Por determinar"}
- Ciudad estimada: {ciudad_identificada if ciudad_identificada else "Por determinar"}

OBSERVACIONES:
{datos_cliente.get("observaciones", "Empresa nueva en nuestra base de datos")}

CONTEXTO CONVERSACIONAL PREVIO:
{formatear_contexto_conversacion(contexto_conversacion)}

INSTRUCCIONES:
Esta empresa NO es cliente actual de nuestra entidad. Dale una bienvenida c√°lida, expl√≠cale que como empresa nueva evaluaremos su solicitud con nuestros productos dise√±ados para todo tipo de empresas. Tranquil√≠zala mencionando que tenemos soluciones para empresas en todas las etapas de desarrollo. Gu√≠a el siguiente paso indicando que necesitaremos documentos financieros para la evaluaci√≥n.

PRODUCTOS DISPONIBLES PARA EMPRESAS NUEVAS:
- Cr√©dito Empresarial: $50M-$5.000M, DTF+4.5% a DTF+8%, hasta 5 a√±os
- Hipotecario Comercial: hasta 70% valor inmueble, hasta 15 a√±os  
- L√≠nea de Cr√©dito Rotativa: disponibilidad inmediata
- Factoring: conversi√≥n inmediata de cuentas por cobrar

Pregunta conversacionalmente qu√© tipo de financiamiento necesita.
"""
    
    return input_text

def formatear_contexto_conversacion(contexto):
    """
    Formatea el contexto conversacional para el agente
    """
    if not contexto:
        return "Primera interacci√≥n del cliente"
    
    contexto_texto = "Informaci√≥n previa de la conversaci√≥n:\n"
    
    if contexto.get("company_name"):
        contexto_texto += f"- Empresa mencionada: {contexto['company_name']}\n"
    
    if contexto.get("sector"):
        contexto_texto += f"- Sector indicado: {contexto['sector']}\n"
    
    if contexto.get("stage"):
        contexto_texto += f"- Etapa conversacional: {contexto['stage']}\n"
    
    if contexto.get("analysis_completed"):
        contexto_texto += f"- An√°lisis completado: {'S√≠' if contexto['analysis_completed'] else 'No'}\n"
        
        if contexto.get("decision"):
            contexto_texto += f"- Decisi√≥n previa: {contexto['decision']}\n"
            
        if contexto.get("score"):
            contexto_texto += f"- Score obtenido: {contexto['score']}/1000\n"
    
    return contexto_texto

def formatear_monto(monto):
    """
    Formatea montos grandes en formato colombiano (millones/billones)
    """
    if monto == 0:
        return "$0"
    elif monto >= 1000000000:  # Mil millones o m√°s
        billones = monto / 1000000000
        return f"${billones:,.1f} mil millones"
    elif monto >= 1000000:  # Millones
        millones = monto / 1000000
        return f"${millones:,.0f} millones"
    else:
        return f"${monto:,.0f}"

def extraer_nit_de_mensaje(mensaje):
    """
    Extrae el NIT del mensaje del usuario usando expresiones regulares
    """
    import re
    
    # Patrones comunes para NITs en Colombia
    patrones_nit = [
        r'\b(\d{9}-\d)\b',  # Formato: 123456789-0
        r'\b(\d{9})\b',     # Solo n√∫meros: 123456789
        r'\b(\d{3}\.?\d{3}\.?\d{3}-\d)\b',  # Con puntos: 123.456.789-0
    ]
    
    for patron in patrones_nit:
        match = re.search(patron, mensaje)
        if match:
            nit_encontrado = match.group(1)
            # Limpiar y formatear
            nit_limpio = nit_encontrado.replace(".", "").replace(" ", "")
            return nit_limpio
    
    return None

def validar_formato_nit(nit):
    """
    Valida que el NIT tenga formato colombiano v√°lido
    """
    import re
    
    if not nit:
        return False, "NIT vac√≠o"
    
    # Limpiar NIT
    nit_limpio = str(nit).replace("-", "").replace(".", "").replace(" ", "")
    
    # Verificar longitud (8-10 d√≠gitos)
    if len(nit_limpio) < 8 or len(nit_limpio) > 10:
        return False, "NIT debe tener entre 8 y 10 d√≠gitos"
    
    # Verificar que solo contenga n√∫meros
    if not nit_limpio.isdigit():
        return False, "NIT debe contener solo n√∫meros"
    
    return True, "NIT v√°lido"

def procesar_respuesta_verificador(respuesta_agente, nit):
    """
    Procesa la respuesta del agente verificador y extrae informaci√≥n estructurada
    """
    
    # Consultar datos originales para metadata
    datos_cliente = consultar_cliente(nit)
    
    return {
        "mensaje_conversacional": respuesta_agente,
        "es_cliente_existente": datos_cliente.get("es_cliente", False),
        "nombre_empresa": datos_cliente.get("nombre", "Empresa no identificada"),
        "nit_consultado": nit,
        "score_interno": datos_cliente.get("score_interno_historico", 0) if datos_cliente.get("es_cliente") else None,
        "clasificacion_riesgo": datos_cliente.get("clasificacion_riesgo", "") if datos_cliente.get("es_cliente") else "Nuevo",
        "beneficios_disponibles": datos_cliente.get("beneficios_disponibles", []) if datos_cliente.get("es_cliente") else [],
        "siguiente_paso": "verificacion_completada"
    }
    
def extraer_info_credito_del_mensaje(mensaje):
    """
    Extrae informaci√≥n completa usando comprensi√≥n de lenguaje natural de Claude
    VERSI√ìN MEJORADA - Sin regex, con comprensi√≥n contextual
    """
    import re
    
    info = {}
    mensaje_lower = mensaje.lower()
    
    print(f"[LOG] Analizando mensaje para extracci√≥n: {mensaje[:100]}...")
    
    # EXTRAER TIPO DE CR√âDITO usando comprensi√≥n natural
    tipos_credito = {
        # M√°s espec√≠fico a menos espec√≠fico
        "capital de trabajo": "cr√©dito empresarial",
        "cr√©dito de capital de trabajo": "cr√©dito empresarial", 
        "cr√©dito empresarial": "cr√©dito empresarial",
        "cr√©dito comercial": "cr√©dito empresarial",
        "credito empresarial": "cr√©dito empresarial",
        "credito comercial": "cr√©dito empresarial",
        "empresarial": "cr√©dito empresarial",
        "comercial": "cr√©dito empresarial",
        "expansi√≥n": "cr√©dito empresarial",
        "expansion": "cr√©dito empresarial",
        "crecimiento": "cr√©dito empresarial",
        "inversi√≥n": "cr√©dito empresarial",
        "inversion": "cr√©dito empresarial",
        "financiamiento": "cr√©dito empresarial",
        
        # L√≠nea rotativa
        "l√≠nea de cr√©dito": "l√≠nea rotativa",
        "linea de credito": "l√≠nea rotativa", 
        "l√≠nea rotativa": "l√≠nea rotativa",
        "linea rotativa": "l√≠nea rotativa",
        "rotativo": "l√≠nea rotativa",
        "rotativa": "l√≠nea rotativa",
        
        # Hipotecario
        "hipotecario": "hipotecario comercial",
        "hipoteca": "hipotecario comercial",
        "inmueble": "hipotecario comercial",
        "propiedad": "hipotecario comercial",
        
        # Factoring
        "factoring": "factoring",
        "cartera": "factoring",
        "cuentas por cobrar": "factoring"
    }
    
    for palabra_clave, tipo_estandar in tipos_credito.items():
        if palabra_clave in mensaje_lower:
            info["tipo_credito"] = tipo_estandar
            info["tipo_original"] = palabra_clave
            print(f"[LOG] Tipo detectado: {palabra_clave} -> {tipo_estandar}")
            break
    
    # EXTRAER MONTO usando comprensi√≥n natural mejorada
    # Patrones m√°s inteligentes y flexibles
    patrones_monto = [
        # N√∫meros con palabras expl√≠citas
        r'(\d{1,4})\s*mil\s*millones?',  # 5 mil millones
        r'(\d{1,3}(?:[.,]\d{3})*)\s*millones?',  # 500 millones, 1.000 millones
        r'\$\s*(\d{1,3}(?:[.,]\d{3})*)\s*millones?',  # $500 millones
        
        # Formato con M
        r'\$?\s*(\d{1,4})\s*[Mm](?:[Mm])?',  # 500M, $300MM
        
        # N√∫meros grandes sin millones expl√≠cito
        r'\$\s*(\d{3,}(?:[.,]\d{3})*)',  # $500,000,000
        
        # Casos especiales en texto
        r'quinientos?\s*millones?',  # quinientos millones -> 500
        r'mil\s*millones?',  # mil millones -> 1000 (cuando no hay n√∫mero antes)
    ]
    
    for i, patron in enumerate(patrones_monto):
        match = re.search(patron, mensaje, re.IGNORECASE)
        if match:
            if patron == r'quinientos?\s*millones?':
                numero = 500
            elif patron == r'mil\s*millones?':
                numero = 1000
            else:
                numero_str = match.group(1).replace('.', '').replace(',', '')
                try:
                    numero = int(numero_str)
                except ValueError:
                    continue
            
            # Calcular monto final
            if 'mil millones' in match.group(0).lower():
                monto_final = numero * 1000000000
                formato = f"${numero} mil millones"
            elif 'millones' in match.group(0).lower() or 'M' in match.group(0):
                monto_final = numero * 1000000  
                formato = f"${numero}M"
            elif numero >= 100000000:  # Si es un n√∫mero grande sin palabra
                monto_final = numero
                formato = f"${numero//1000000}M"
            else:
                monto_final = numero * 1000000
                formato = f"${numero}M"
            
            # Validar rango razonable
            if monto_final < 1000000:  # Menos de 1M
                print(f"[WARNING] Monto muy peque√±o: ${monto_final:,}")
                continue
            elif monto_final > 50000000000:  # M√°s de 50 mil millones
                print(f"[WARNING] Monto muy grande: ${monto_final:,}")
                monto_final = 5000000000  # Limitar a 5 mil millones
                formato = "$5,000M"
            
            info["monto_solicitado"] = monto_final
            info["monto_formato"] = formato
            
            print(f"[LOG] Monto detectado (patr√≥n {i+1}): {match.group(0)} -> ${monto_final:,}")
            break
    
    # EXTRAER PROP√ìSITO usando comprensi√≥n natural
    propositos = {
        "capital de trabajo": "capital de trabajo",
        "flujo de caja": "capital de trabajo", 
        "inventario": "capital de trabajo",
        "operativo": "capital de trabajo",
        "operaci√≥n": "capital de trabajo",
        "expansi√≥n": "expansi√≥n",
        "expansion": "expansi√≥n", 
        "crecimiento": "expansi√≥n",
        "ampliaci√≥n": "expansi√≥n",
        "inversi√≥n": "inversi√≥n",
        "inversion": "inversi√≥n",
        "equipos": "compra de equipos",
        "maquinaria": "compra de equipos",
        "tecnolog√≠a": "compra de equipos",
        "inmueble": "compra de inmueble",
        "local": "compra de inmueble",
        "oficina": "compra de inmueble"
    }
    
    for palabra_clave, proposito_estandar in propositos.items():
        if palabra_clave in mensaje_lower:
            info["proposito"] = proposito_estandar
            print(f"[LOG] Prop√≥sito detectado: {proposito_estandar}")
            break
    
    print(f"[LOG] Informaci√≥n extra√≠da: {info}")
    return info


def build_conversational_input(message, context, history):
    """
    Construye input para el agente conversacional incluyendo informaci√≥n del cr√©dito
    VERSI√ìN MEJORADA que incluye info del cr√©dito en el contexto
    """
    context_section = ""
    if context:
        context_section = f"""
CONTEXTO DE LA CONVERSACI√ìN:
- Empresa: {context.get('company_name') or context.get('nombre_empresa', 'No especificada')}
- Sector: {context.get('sector', 'No especificado')}
- Etapa actual: {context.get('stage', 'inicial')}
- An√°lisis completado: {'S√≠' if context.get('analysis_completed') else 'No'}
"""
        
        # INFORMACI√ìN DEL CR√âDITO SOLICITADO (NUEVO)
        if context.get('tipo_credito') or context.get('monto_solicitado'):
            context_section += "\nINFORMACI√ìN DEL CR√âDITO SOLICITADO:\n"
            if context.get('tipo_credito'):
                context_section += f"- Tipo: {context['tipo_credito']}\n"
            if context.get('monto_solicitado'):
                context_section += f"- Monto: ${context['monto_solicitado']:,} ({context.get('monto_formato', 'N/A')})\n"
            if context.get('proposito'):
                context_section += f"- Prop√≥sito: {context['proposito']}\n"
            if context.get('solicitud_completa'):
                context_section += "- Solicitud: COMPLETA (no preguntar tipo ni monto de nuevo)\n"
        
        if context.get('analysis_completed'):
            context_section += f"""
- Decisi√≥n crediticia: {context.get('decision', 'No disponible')}
- Score obtenido: {context.get('score', 'No disponible')}/1000
"""

        # Informaci√≥n de verificaci√≥n de cliente
        if context.get('empresa_verificada'):
            context_section += f"""
- Cliente verificado: {'S√≠' if context.get('es_cliente_existente') else 'No'}
- NIT: {context.get('nit_empresa', 'No disponible')}
"""
            if context.get('es_cliente_existente'):
                context_section += f"""
- Score interno: {context.get('score_interno', 'No disponible')}/1000
- Clasificaci√≥n: {context.get('clasificacion_riesgo', 'No disponible')}
- Beneficios disponibles: {len(context.get('beneficios_disponibles', []))}
"""

        # Informaci√≥n de ofertas
        if context.get('stage') == 'esperando_respuesta_oferta':
            context_section += f"""
- Oferta generada: S√≠
- Esperando respuesta del cliente (S√ç/NO)
"""

    history_section = ""
    if history and len(history) > 0:
        recent_messages = history[-6:]
        history_section = "\nHISTORIAL RECIENTE:\n"
        for msg in recent_messages:
            sender = "Usuario" if msg.get('sender') == 'user' else "CreditBot"
            message_text = msg.get('message', '')[:200]
            history_section += f"{sender}: {message_text}\n"

    return f"""{context_section}{history_section}
MENSAJE ACTUAL DEL USUARIO:
{message}

INSTRUCCI√ìN CR√çTICA: Si ya tienes informaci√≥n del cr√©dito en el contexto (tipo, monto), NO vuelvas a preguntarla. √ösala directamente.

Responde de forma natural y conversacional como un asesor crediticio experto.
"""